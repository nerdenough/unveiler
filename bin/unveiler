#!/usr/bin/env ruby
require 'unveiler'

# Encodes the input file with the specified data, saving the manipulated data
# to the output file.
#
# +input+::  File to be encoded
# +output+:: File to write encoded data to
# +data+::   Data to be encoded
def encode(input, output, data)
  begin
    target = read_file(input)
    data = Unveiler.encode(target, data)
    write_file(output, data)
  rescue
    puts $!
  end
end

# Decodes the provided input file and saves the decoded data to the output
# file.
#
# +input+::  File to be decoded
# +output+:: File to write decoded data to
def decode(input, output)
  begin
    target = read_file(input)
    data = Unveiler.decode(target)
    write_file(output, data + "\n")
  rescue
    puts $!.message
  end
end

# Reads data from the specified file.
#
# +input+:: File to read
def read_file(input)
  File.open(input, 'rb'){|file| return file.read}
end

# Writes data to the specified file.
#
# +output+:: File to write
def write_file(output, data)
  File.open(output, 'wb'){|file| file.write(data)}
end

# Prints unveiler usage examples.
def usage
  puts 'Usage:'
  puts 'unveiler encode [input_file] [output_file] [data]'
  puts 'unveiler decode [input_file] [output_file]'
end

# Parses ARGV to ensure the correct parameters are given.
def parse_argv
  if ARGV.first == 'encode'
    ARGV.length == 4 ? encode(ARGV[1], ARGV[2], ARGV[3]) : usage
  elsif ARGV.first == 'decode'
    ARGV.length == 3 ? decode(ARGV[1], ARGV[2]) : usage
  else
    usage
  end
end

ARGV.empty? ? usage : parse_argv
