#!/usr/bin/env ruby
require 'unveiler'

# Encodes the input file with the specified data, saving the manipulated data
# to the output file.
def encode(input, output, data)
  begin
    target = read_file(input)
    data = Unveiler.encode(target, data)
    write_file(output, data)
  rescue
    puts $!
  end
end

# Decodes the provided input file and saves the decoded data to the output
# file.
def decode(input, output)
  begin
    target = read_file(input)
    data = Unveiler.decode(target)
    write_file(output, data + "\n")
  rescue
    puts $!.message
  end
end

# Reads data from the specified file.
def read_file(input)
  File.open(input, 'rb'){|file| return file.read}
end

# Writes data to the specified file.
def write_file(output, data)
  File.open(output, 'wb'){|file| file.write(data)}
end

# Prints unveiler usage examples.
def usage
  puts 'Usage:'
  puts 'unveiler encode [input_file] [output_file] [data]'
  puts 'unveiler decode [input_file] [output_file]'
end

# Verify the correct arguments have been specified
if ARGV.empty?
  usage
elsif ARGV.first == 'encode'
  if ARGV.length == 4 then encode(ARGV[1], ARGV[2], ARGV[3])
  else
    usage
  end
elsif ARGV.first == 'decode'
  if ARGV.length == 3 then decode(ARGV[1], ARGV[2])
  else
    usage
  end
else
  usage
end
