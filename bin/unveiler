#!/usr/bin/env ruby
require 'unveiler'

# Encodes the input file with the specified data, saving the manipulated data
# to the output file.
#
# +input+::  File to be encoded
# +output+:: File to write encoded data to
# +type+::   Specifies whether the data is a file name or a string
# +value+::  File name or string data
def encode(input, output, type, value)
  data = ''
  if type == 'string'
    data = value
  elsif type == 'file'
    data = read_file(value)
  else
    raise ArgumentError, 'Expecting string of data or file name for type/value'
  end

  begin
    target = read_file(input)
    data = Unveiler.encode(target, data)
    write_file(output, data)
  rescue
    puts $!.message
  end
end

# Decodes the provided input file and saves the decoded data to the output
# file.
#
# +input+::  File to be decoded
# +output+:: File to write decoded data to
def decode(input, output)
  begin
    target = read_file(input)
    data = Unveiler.decode(target)
    write_file(output, data + "\n")
  rescue
    puts $!.message
  end
end

# Reads data from the specified file.
#
# +input+:: File to read
def read_file(input)
  File.open(input, 'rb'){|file| return file.read}
end

# Writes data to the specified file.
#
# +output+:: File to write
def write_file(output, data)
  File.open(output, 'wb'){|file| file.write(data)}
end

# Prints unveiler usage examples.
def usage
  puts 'Usage:'
  puts 'unveiler encode [input_file] [output_file] [data]'
  puts 'unveiler decode [input_file] [output_file]'
  exit
end

# Parses ARGV to ensure the correct parameters are given.
def parse_argv
  command = ''
  data_type = ''
  data_value = ''
  input_file = ''
  output_file = ''

  begin
    ARGV.length.times do |i|
      if ARGV[i] == '-e' || ARGV[i] == '--encode'
        command = 'encode'
      elsif ARGV[i] == '-d' || ARGV[i] == '--decode'
        command = 'decode'
      elsif ARGV[i] == '-i' || ARGV[i] == '--input'
        input_file = ARGV[i + 1]
      elsif ARGV[i] == '-o' || ARGV[i] == '--output'
        output_file = ARGV[i + 1]
      elsif ARGV[i] == '-s' || ARGV[i] == '--string'
        data_type = 'string'
        data_value = ARGV[i + 1]
      elsif ARGV[i] == '-f' || ARGV[i] == '--file'
        data_type = 'file'
        data_value = ARGV[i + 1]
      end
    end
  rescue
    usage
  end

  usage if command == '' || input_file == '' || output_file == ''
  usage if command == 'encode' && (data_type == '' || data_value == '')

  if command == 'encode'
    encode(input_file, output_file, data_type, data_value)
  elsif command == 'decode'
    decode(input_file, output_file)
  end
end

ARGV.empty? ? usage : parse_argv
